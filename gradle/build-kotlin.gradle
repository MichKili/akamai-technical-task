import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.yaml:snakeyaml:2.2'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlin_version}"
    id 'org.springframework.boot' version "${springboot_version}"
    id 'org.springdoc.openapi-gradle-plugin' version "1.7.0"
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id "org.openapi.generator" version "7.0.1"
    id "org.jlleitschuh.gradle.ktlint" version "11.6.1"
}

group = 'com.paymenttools'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    agent
    compileOnly {
        extendsFrom annotationProcessor
    }
    integration_testImplementation.extendsFrom testImplementation
    integration_testRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integration_test {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
    main {
        java {
            srcDirs("src/main/kotlin", "$buildDir/generated/src/main/kotlin")
        }
    }
}

repositories {
    mavenCentral()
}

tasks {
    forkedSpringBootRun {
        doNotTrackState("See https://github.com/springdoc/springdoc-openapi-gradle-plugin/issues/102")
    }
}

openApi {
    def applicationYml = new Yaml().load(new File("src/main/resources/application-local.yml").newInputStream())
    project.ext.set("applicationYml", applicationYml)

    def url = createOpenApiUrl()
    apiDocsUrl.set(url)

    customBootRun {
        args = ['--spring.profiles.active=local']
    }
}

def createOpenApiUrl() {
    def openApiUrl = project.applicationYml
        .get('spring')
        .getOrDefault('api-docs', Map.of('path', '/v3/api-docs'))
        .getOrDefault('path', '/v3/api-docs')
    return createUrl() + openApiUrl
}

def createUrl() {
    def protocol = 'http'
    def hostAddress = 'localhost'
    def serverPort = project.applicationYml
        .get('server')
        .getOrDefault('port', '8082')

    def contextPath = project.applicationYml
        .get('server')
        .get('servlet')
        .get('context-path')

    if (contextPath == null || contextPath.isBlank()) {
        contextPath = '/api'
    }
    try {
        hostAddress = InetAddress.getLocalHost().getHostAddress()
    } catch (UnknownHostException ignored) {
        logger.info('The host name could not be determined, using `localhost` as fallback')
    }
    return protocol + '://' + hostAddress + ':' + serverPort + contextPath
}


dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    // Spanner & DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.google.cloud:spring-cloud-gcp-dependencies:4.8.1'
    implementation 'com.google.cloud:google-cloud-spanner-jdbc:2.13.4'

    // Flyway
    implementation 'org.flywaydb:flyway-core:9.22.3'
    implementation 'org.flywaydb:flyway-gcp-spanner:9.22.3-beta'

    // Openapi / Swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc_openapi_version}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"

    // Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.tomakehurst:wiremock:3.0.1'
    testImplementation "org.testcontainers:testcontainers:${tc_version}"
    testImplementation "org.testcontainers:gcloud:${tc_version}"
    testImplementation "org.testcontainers:junit-jupiter:${tc_version}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.1.0"

    // Opentelemetry
    agent 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.31.0'
    implementation 'io.opentelemetry:opentelemetry-api:1.31.0'
    runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:1.31.0-alpha'

    //GCP
    implementation "com.google.cloud:spring-cloud-gcp-starter-secretmanager:${google_cloud_version}"
}

tasks.register('downloadAgent', Copy,) {
    from configurations.agent
    rename('(.*)-.*(.jar)', '$1$2')
    into 'agent/'
}

tasks.named('jibBuildTar') {
    dependsOn tasks.named('downloadAgent')
}
tasks.named('forkedSpringBootRun') {
    dependsOn tasks.named('downloadAgent')
}

jib {

    from {
        image = "gcr.io/distroless/java17:latest"
    }
    to {
        image = 'paymenttools/giftcards-service'
    }
    container {
        ports = ['8080', '8081']
        mainClass = 'com.paymenttools.giftcards.GiftcardsServiceApplicationKt'
        jvmFlags = ['-XX:InitialRAMPercentage=80.0',
                    '-XX:MaxRAMPercentage=80.0',
                    '-javaagent:/app/agent/opentelemetry-javaagent.jar',
                    '-Dio.opentelemetry.javaagent.slf4j.simpleLogger.logFile=System.out'
        ]
    }
    extraDirectories {
        paths {
            path {
                from = 'agent'
                into = '/app/agent'
                getPermissions().put('*.jar', '644')
            }
        }
    }
}

tasks.processResources.finalizedBy tasks.downloadAgent

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
    description = "Run integration tests"
    group = "verification"
    testClassesDirs = sourceSets.integration_test.output.classesDirs
    classpath = sourceSets.integration_test.runtimeClasspath
    useJUnitPlatform()
}

tasks.register("buildLoyaltyClient", GenerateTask) {
    generatorName.set("kotlin")
    remoteInputSpec.set("https://loyalty.dev.paymenttools.net/api/v3/api-docs")
    outputDir.set("$buildDir/generated")
    modelPackage.set("com.paymenttools.giftcards.integration.loyalty.model")
    modelNamePrefix.set("Loyalty")
    library.set("jvm-spring-webclient")
    typeMappings.set([
        'string+date-time': 'java.time.Instant'
    ])
    importMappings.set([
        'Instant': 'java.time.Instant'
    ])
    configOptions.set([
        dateLibrary         : "java17",
        serializationLibrary: "jackson",
        enumPropertyNaming  : "UPPERCASE"
    ])
}

tasks.processResources.finalizedBy tasks.named("buildLoyaltyClient")
tasks.compileKotlin {
    mustRunAfter(":buildLoyaltyClient")
}


ktlint {
    version = "1.0.1"
    filter {
        exclude { element -> element.file.path.contains(layout.buildDirectory.dir("generated").get().toString()) }
    }
}

tasks.named('runKtlintCheckOverMainSourceSet') {
    mustRunAfter( tasks.named('compileKotlin'))
}